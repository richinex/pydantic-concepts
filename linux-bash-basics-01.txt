# Verify bash version
$ bash --version

# Check environment variables
$ env

SHELL=/bin/bash
LANGUAGE=en_CA:en
DESKTOP_SESSION=ubuntu
PWD=/home/user
--snip--

# Read individual variables
$ echo ${SHELL}

/bin/bash
$ ls -l
Some commands let you supply multiple arguments by joining them together or listing them separately:

$ ls -la
$ ls -l -a
Note that some commands may throw errors if you attempt to join two arguments with a single dash, so use the man command to learn the syntax that’s permitted.

Some command options may allow you to use long-form argument syntax, such as the --help command to list the available options. Long-form argument syntax is prepended by the double dash (--) symbol:

$ ls --help

list processes by using ps with short-form argument syntax, supplying the arguments separately and then together:

$ ps -e -f
$ ps -ef
Finally, let’s display the available disk space by using df with long-form argument syntax:

$ df --human-readable

# Elements of a Bash Script
he Shebang Line
Every script should begin with the shebang line, a character sequence that starts with the hash and exclamation marks (#!), followed by the full path to the script interpreter. Listing 1-4 shows an example of a shebang line for a typical bash script.

#!/bin/bash
Listing 1-4: A bash shebang line

The bash interpreter is typically located at /bin/bash. If you instead wrote scripts in Python or Ruby, your shebang line would include the full path to the Python or Ruby interpreter.

You’ll sometimes encounter bash scripts that use a shebang line like this one:

#!/usr/bin/env bash
You may want to use this shebang line because it is more portable than the previous

# To print  all commands and their arguments as they are executed to the terminal we use:
#!/bin/bash -x

Another example of an optional argument is -r:

#!/bin/bash -r
This option creates a restricted bash shell, which restricts certain potentially dangerous commands that could, for example, navigate to certain directories, change sensitive environment variables, or attempt to turn off the restricted shell from within the script.

Comments
Comments are parts of a script that the bash interpreter won’t treat as code and that can improve the readability of a program. Imagine that you write a long script and, a few years later, need to modify some of its logic. If you didn’t write comments to explain what you did, you might find it quite challenging to remember the purpose of each section.

Comments in bash start with a hash mark (#), as shown in Listing 1-5.

#!/bin/bash

# This is my first script.
Listing 1-5: A comment in a bash script

Except for the shebang line, every line that starts with a hash mark is considered a comment. If you wrote the shebang line twice, bash would consider the second one to be a comment.

To write a multiline comment, precede each individual line with the hash mark, as shown in Listing 1-6.

#!/bin/bash

# This is my first script!
# Bash scripting is fun...

NB: In addition to documenting a script’s logic, comments can provide metadata to indicate the author, the script’s version, the person to contact for issues, and more. These comments usually appear at the top part of the script, below the shebang line.

Commands
Scripts can be as short as two lines: the shebang line and a Linux command. Let’s write a simple script that prints Hello World! to the terminal. Open your text editor and enter the following:

#!/bin/bash

echo "Hello World!"
In this example, we use the shebang statement to specify the interpreter of choice, bash. Then we use the echo command to print the string Hello World! to the screen.

Execution
To run the script, save the file as helloworld.sh, open the terminal, and navigate to the directory where the script resides. If you saved the file in your home directory, you should run the set of commands shown in Listing 1-7.

$ cd ~
$ chmod u+x helloworld.sh
$ ./helloworld.sh

Hello World!
Listing 1-7: Running a script from the home directory

We use the cd command to change directories. The tilde (~) represents the home directory of the current running user. Next, we use chmod to set the executable (u+x) permissions for the user who owns the file (in this case, us). We run the script by using dot-slash notation (./) followed by the script’s name. The dot (.) represents the current directory, so we’re essentially telling bash to run helloworld.sh from the current working directory.

NB: If you run the command with the bash prefix, the script will run using the bash interpreter and won’t require a shebang line. Also, if you use the bash command, the script doesn’t have to be set with an executable permission (+x).

Debugging
Errors will inevitably occur when you’re developing bash scripts. Luckily, debugging scripts is quite intuitive. An easy way to check for errors early is by using the -n parameter when running a script:

$ bash -n script.sh
This parameter will read the commands in the script but won’t execute them, so any syntax errors that exist will be shown onscreen. You can think of -n as a dry-run method to test the validity of your syntax.

You can also use the -x parameter to turn on verbose mode, which lets you see commands being executed and will help you debug issues as the script executes in real time:

$ bash -x script.sh
If you want to start debugging at a given point in the script, include the set command in the script itself (Listing 1-8).

#!/bin/bash
set -x

--snip--

set +x


You can assign the output of a command to a variable by using the command substitution syntax $(), placing the desired command within the parentheses. You’ll use this syntax often in bash programming. Try running the commands in Listing 1-10.

$ root_directory=$(ls -ld /)
$ echo "${root_directory}"

drwxr-xr-x 1 user user 0 Feb 13 20:12 /

Scoping Variables
Global variables are those available to the entire program. But variables in bash can also be scoped so that they are accessible only from within a certain block of code. These local variables are declared using the local keyword. The script in Listing 1-12 shows how local and global variables work.

local_scope _variable.sh

#!/bin/bash

PUBLISHER="No Starch Press"

print_name(){
   local name
   name="Black Hat Bash"
   echo "${name} by ${PUBLISHER}"
}

print_name

echo "Variable ${name} will not be printed because it is a local variable."

Arithmetic Operators
=====================
Operator Table

diff

+-------+-------------------------------+
| Operator | Description                 |
+---------+-----------------------------+
|   +     | Addition                    |
|   -     | Subtraction                 |
|   *     | Multiplication              |
|   /     | Division                    |
|   %     | Modulo                      |
|  +=     | Incrementing by a constant  |
|  -=     | Decrementing by a constant  |
+---------+-----------------------------+

You can perform these arithmetic operations in Bash in a few ways: using the let command, the double parentheses syntax $((expression)), or the expr command. Let’s consider an example of each method.
Example with let Command

Listing 1-13: Arithmetic with let

bash

$ let result="4 * 5"
$ echo ${result}

20

This command takes a variable name and performs an arithmetic calculation to resolve its value.
Example with Double Parentheses Syntax

Listing 1-14: Arithmetic with Double Parentheses Syntax

bash

$ result=$((5 * 5))
$ echo ${result}

25

In this case, the calculation is performed within double parentheses.
Example with expr Command

Listing 1-15: Evaluating Expressions with expr

bash

$ result=$(expr 5 + 505)
$ echo ${result}

510

The expr command evaluates expressions, which don’t have to be arithmetic operations. For example, you might use it to calculate the length of a string. Use man expr to learn more about the capabilities of expr.
Arrays

Bash allows you to create single-dimension arrays. An array is a collection of elements that are indexed. You can access these elements by using their index numbers, which begin at zero. In Bash scripts, you might use arrays whenever you need to iterate over multiple strings and run the same commands on each one.
Creating and Accessing Arrays

Listing 1-16: Creating and Accessing Arrays

bash

#!/bin/bash

# Sets an array
IP_ADDRESSES=(192.168.1.1 192.168.1.2 192.168.1.3)

# Prints all elements in the array
echo "${IP_ADDRESSES[*]}"

# Prints only the first element in the array
echo "${IP_ADDRESSES[0]}"

Output:

bash

$ chmod u+x array.sh
$ ./array.sh

192.168.1.1 192.168.1.2 192.168.1.3
192.168.1.1

This script uses an array named IP_ADDRESSES that contains three Internet Protocol (IP) addresses. The first echo command prints all the elements in the array by passing [*] to the variable name IP_ADDRESSES, which holds the array values. The asterisk (*) represents every array element. Finally, another echo command prints just the first element in the array by specifying index 0.
Deleting Array Elements

Listing 1-17: Deleting Array Elements

bash

IP_ADDRESSES=(192.168.1.1 192.168.1.2 192.168.1.3)

unset IP_ADDRESSES[1]

You can even swap one of the values with another value. This code will replace 192.168.1.1 with 192.168.1.10:

bash

IP_ADDRESSES[0]="192.168.1.10"

Arrays are particularly useful when you need to iterate over values and perform actions against them, such as a list of IP addresses to scan or a list of email addresses to send a phishing email to.
Streams

Streams are files that act as communication channels between a program and its environment. When you interact with a program (whether a built-in Linux utility such as ls or mkdir or one that you wrote yourself), you’re interacting with one or more streams. Bash has three standard data streams, as shown in Table 1-2.
Table 1-2: Streams

lua

+-------------------+-------------------------------------------+-------------------------+
| Stream Name       | Description                               | File Descriptor Number |
+-------------------+-------------------------------------------+-------------------------+
| Standard input     | Data coming into a program as input       |          0              |
| Standard output    | Data coming out of a program              |          1              |
| Standard error     | Errors coming out of a program            |          2              |
+-------------------+-------------------------------------------+-------------------------+

So far, we’ve run a few commands from the terminal and written and executed a simple script. The generated output was sent to the standard output stream (stdout), or in other words, your terminal screen.

Scripts can also receive commands as input. When a script is designed to receive input, it reads it from the standard input stream (stdin). Finally, scripts may display error messages to the screen due to a bug or syntax error in the commands sent to it. These messages are sent to the standard error stream (stderr).
Example: Using Streams

Use the mkdir command to create a few directories and then use ls to list the content of the current directory.

bash

$ mkdir directory1 directory2 directory1
mkdir: cannot create directory 'directory1': File exists

$ ls -l
total 1
drwxr-xr-x 1 user user   0 Feb 17 09:45 directory1
drwxr-xr-x 1 user user   0 Feb 17 09:45 directory2

Notice that mkdir generates an error because directory1 is passed twice on the command line. Errors are sent to the standard error stream (stderr). The ls -l command lists the directories and sends its output to the standard output stream (stdout).
Control Operators

Control operators in Bash are tokens that perform a control function. Table 1-3 gives an overview of control operators.
Table 1-3: Bash Control Operators

vbnet

+-----------+-----------------------------------------------------------+
| Operator  | Description                                               |
+-----------+-----------------------------------------------------------+
|    &      | Sends a command to the background.                       |
|   &&      | Logical AND. The second command runs only if the first    |
|           | succeeds (returns true).                                  |
|   ()      | Used for command grouping.                                |
|    ;      | List terminator. Runs the next command regardless of     |
|           | the previous command's success.                          |
|   ;;      | Ends a case statement.                                    |
|    |      | Pipe. Redirects the output of one command as input to    |
|           | another command.                                         |
|   ||      | Logical OR. The second command runs only if the first     |
|           | fails (returns false).                                    |
+-----------+-----------------------------------------------------------+

Examples of Control Operators in Action
Sending a Command to the Background

Listing 1-18: Sending a Command to the Background

bash

#!/bin/bash

# This script will send the sleep command to the background.
echo "Sleeping for 10 seconds..."
sleep 10 &

# Creates a file
echo "Creating the file test123"
touch test123

# Deletes a file
echo "Deleting the file test123"
rm test123

Commands that are long-running are often sent to the background to prevent scripts from hanging. You’ll learn about sending commands to the background in more depth when we discuss job control in Chapter 2.
Logical AND (&&)

bash

touch test && touch test123

The file test123 will be created only if the touch test command is successful.
Command Grouping with ()

bash

(ls; ps)

This groups the ls and ps commands so they act as a single unit, which is useful for redirection.
List Terminator (;)

bash

ls; ps; whoami

Each command is executed one after the other, regardless of the exit status of the previous command.
Logical OR (||)

bash

lzl || echo "the lzl command failed"

The echo command will be executed only if the lzl command fails.
Redirection Operators

The three standard streams we highlighted earlier can be redirected from one program to another. Redirection is taking output from one command or script and using it as input to another script or file for writing purposes. Table 1-4 describes the available redirection operators.
Table 1-4: Redirection Operators

css

+-----------+--------------------------------------------------------------+
| Operator  | Description                                                  |
+-----------+--------------------------------------------------------------+
|     >     | Redirects stdout to a file                                   |
|    >>     | Redirects stdout to a file by appending to existing content  |
|  &> / >&  | Redirects stdout and stderr to a file                        |
|  &>>      | Redirects stdout and stderr to a file by appending          |
|     <     | Redirects input to a command                                 |
|    <<     | Here document (heredoc). Redirects multiple input lines      |
|     |     | Pipe. Redirects output of one command as input to another    |
+-----------+--------------------------------------------------------------+

Examples of Redirection Operators
Redirecting Standard Output (>)

bash

$ echo "Hello World!" > output.txt

Redirects the standard output stream to a file named output.txt.

View Content:

bash

$ cat output.txt

Hello World!

Appending to a File (>>)

Listing 1-19: Appending Content to a File

bash

$ echo "Goodbye!" >> output.txt
$ cat output.txt

Hello World!
Goodbye!

If you had used > instead of >>, the content of output.txt would have been overwritten completely with the Goodbye! text.
Redirecting Both stdout and stderr (&>)

bash

$ ls -l / &> stdout_and_stderr.txt

Redirects both the standard output and standard error streams to a file.
Appending Both stdout and stderr (&>>)

bash

$ ls -l / &>> stdout_and_stderr.txt

Appends both the standard output and standard error streams to a file.
Redirecting to Separate Files

bash

$ ls -l / 1> stdout.txt 2> stderr.txt

Redirects the standard output stream to stdout.txt and the standard error stream to stderr.txt.

Example with Error:

bash

$ lzl 2> error.txt
$ cat error.txt

bash: lzl: command not found

The error message is written to error.txt instead of appearing on the screen.
Redirecting Standard Input (<)

Listing 1-20: Using a File as a Command’s Input

bash

$ cat < output.txt

Hello World!
Goodbye!

Supplies the contents of output.txt as input to the cat command.
Here Document Redirection (<<)

Listing 1-21: Here Document Redirection

bash

$ cat << EOF
  Black Hat Bash
  by No Starch Press
EOF

Black Hat Bash
by No Starch Press

Passes multiple lines as input to a command. The EOF acts as a delimiter, marking the start and end points of the input.
Piping Commands (|)

Listing 1-22: Piping Command Output into Another Command

bash

$ ls -l / | grep "bin"

lrwxrwxrwx   1 root root          7 Mar 10 08:43 bin -> usr/bin
lrwxrwxrwx   1 root root          8 Mar 10 08:43 sbin -> usr/sbin

Uses ls to print the content of the root directory to the standard output stream, then uses a pipe to send it as input to the grep command, which filters out any lines containing the word "bin".

Positional Arguments

Bash scripts can take positional arguments (also called parameters) passed on the command line. Arguments are especially useful when you want to develop a program that modifies its behavior based on input passed to it by another program or user. Arguments can also change features of the script such as the output format and how verbose it will be during runtime.

For example, imagine you develop an exploit and send it to a few colleagues, each of whom will use it against a different IP address. Instead of writing a script and asking the user to modify it with their network information, you can write it to take an IP address argument and then act against this input to avoid having to modify the source code in each case.
Accessing Positional Arguments

A bash script can access arguments passed to it on the command line by using the variables $1, $2, and so on. The number represents the order in which the argument was entered. To illustrate this, the script in Listing 1-23 takes in an argument (an IP address or domain name) and performs a ping test against it using the ping utility. Save this file as ping_with_arguments.sh.

Listing 1-23: A Script That Accepts Command Line Input

bash

#!/bin/bash

# This script will ping any address provided as an argument.

SCRIPT_NAME="${0}"
TARGET="${1}"

echo "Running the script ${SCRIPT_NAME}..."
echo "Pinging the target: ${TARGET}..."
ping "${TARGET}"

This script assigns the first positional argument to the variable TARGET. Notice also that the argument ${0} is assigned to the SCRIPT_NAME variable. This argument contains the script’s name (in this case, ping_with_arguments.sh).
Running the Script with Arguments

To run this script, use the commands in Listing 1-24.

Listing 1-24: Passing Arguments to a Script

bash

$ chmod u+x ping_with_arguments.sh
$ ./ping_with_arguments.sh nostarch.com

Running the script ping_with_arguments.sh...
Pinging the target nostarch.com...
PING nostarch.com (104.20.120.46) 56(84) bytes of data.
64 bytes from 104.20.120.46 (104.20.120.46): icmp_seq=1 ttl=57 time=6.89 ms
64 bytes from 104.20.120.46 (104.20.120.46): icmp_seq=2 ttl=57 time=4.16 ms
--snip--

This script will perform a ping command against the domain nostarch.com passed to it on the command line. The value is assigned to the $1 variable; if another argument is passed, it would get assigned to the second variable, $2. Use CTRL-C to exit this script, as ping may run indefinitely on some operating systems.
Accessing All Arguments

What if you want to access all arguments? You can do so using the variable $@. Also, using $#, you can get the total number of arguments passed. Listing 1-25 demonstrates how this works.

Listing 1-25: Retrieving All Arguments and the Total Number of Arguments

bash

#!/bin/bash

echo "The arguments are: $@"
echo "The total number of arguments is: $#"

Save this script to a file named show_args.sh and run it as follows:

bash

$ chmod u+x show_args.sh
$ ./show_args.sh "hello" "world"

The arguments are: hello world
The total number of arguments is: 2

Table 1-5: Special Variables Related to Positional Arguments

typescript

+---------+------------------------------------------------------------+
| Variable| Description                                                |
+---------+------------------------------------------------------------+
| $0      | The name of the script file                                |
| $1, $2, | Positional arguments                                       |
| $3, ... |                                                            |
| $#      | The number of passed positional arguments                  |
| $*      | All positional arguments                                   |
| $@      | All positional arguments, each individually quoted         |
+---------+------------------------------------------------------------+

    When a script uses "$*" with the quotes included, bash will expand arguments into a single word. For instance:

    bash

$ ./script.sh "1" "2" "3"
1 2 3

When a script uses "$@" (again including the quotes), it will expand arguments into separate words:

bash

    $ ./script.sh "1" "2" "3"
    1
    2
    3

In most cases, you will want to use "$@" so that every argument is treated as an individual word.
Example: Using Special Variables in a Loop

The following script demonstrates how to use these special variables in a for loop:

bash

#!/bin/bash
# Change "$@" to "$*" to observe behavior.

for args in "$@"; do
    echo "${args}"
done

Input Prompting

Some bash scripts don’t take any arguments during execution. However, they may need to ask the user for information in an interactive way and have the response feed into their runtime. In these cases, you can use the read command. You often see applications use input prompting when attempting to install software, asking the user to enter yes to proceed or no to cancel the operation.
Prompting the User for Input

In the bash script in Listing 1-26, we ask the user for their first and last names and then print these to the standard output stream.

Listing 1-26: Prompting a User for Input

bash

#!/bin/bash

# Takes input from the user and assigns it to variables
echo "What is your first name?"
read -r firstname

echo "What is your last name?"
read -r lastname

echo "Your first name is ${firstname} and your last name is ${lastname}"

Save and run this script as input_prompting.sh:

bash

$ chmod u+x input_prompting.sh
$ ./input_prompting.sh

What is your first name?
John

What is your last name?
Doe

Your first name is John and your last name is Doe

Notice that you are prompted to enter information that then gets printed.
Exit Codes

Bash commands return exit codes, which indicate whether the execution of the command succeeded. Exit codes fall in the 0 to 255 range, where 0 means success, 1 means failure, 126 means that the command was found but is not executable, and 127 means the command was not found. The meaning of any other number depends on the specific command being used and its logic.
Checking Exit Codes

To see exit codes in action, save the script in Listing 1-27 to a file named exit_codes.sh and run it.

Listing 1-27: Using Exit Codes to Determine a Command’s Success

bash

#!/bin/bash

# Experimenting with exit codes

ls -l > /dev/null
echo "The exit code of the ls command was: $?"

lzl 2> /dev/null
echo "The exit code of the non-existing lzl command was: $?"

We use the special variable $? with the echo command to return the exit codes of the executed commands ls and lzl. We also redirect their standard output and standard error streams to the file /dev/null, a special device file that discards any data sent to it. When you want to silence commands, you can redirect their output to it.

Run the script:

bash

$ chmod u+x exit_codes.sh
$ ./exit_codes.sh

The exit code of the ls command was: 0
The exit code of the non-existing lzl command was: 127

We receive two distinct exit codes, one for each command. The first command returns 0 (success), and the second returns 127 (command not found).

WARNING: Use /dev/null with caution. You may miss out on important errors if you choose to redirect output to it. When in doubt, redirect standard streams such as standard output and standard error to a dedicated logfile instead.
Setting a Script’s Exit Code

You can set the exit code of a script by using the exit command followed by the code number, as shown in Listing 1-28.

Listing 1-28: Setting a Script’s Exit Code

bash

#!/bin/bash

# Sets the exit code of the script to be 223

echo "Exiting with exit code: 223"
exit 223

Save this script as set_exit_code.sh and run it on the command line. Then use the special variable $? to see the exit code it returns:

bash

$ chmod u+x set_exit_code.sh
$ ./set_exit_code.sh
Exiting with exit code: 223

$ echo $?
223

You can use the $? variable to check the returned exit code not only of a script but also of individual commands:

bash

$ ps -ef
$ echo $?
0

Exit codes are important; they can be used in a series of scripts that call one another or within the same script to control the logical flow of the code execution.

