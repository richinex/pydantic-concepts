1. Introduction

Understanding how AWS IAM roles and policies integrate with EKS service accounts and Kubernetes RBAC is crucial for securing your containerized applications. This guide will cover:

    AWS IAM Roles and Policies: Core concepts, types, and their usage.
    EKS and IAM Integration: How EKS utilizes IAM roles and policies.
    Kubernetes Service Accounts: Their role in authentication and authorization.
    IAM Roles for Service Accounts (IRSA): Detailed implementation and use cases.
    Kubernetes RBAC: Managing permissions within the cluster.
    Best Practices: Guidelines for secure and efficient management.

2. AWS IAM Roles and Policies
2.1. AWS Identity and Access Management (IAM)

AWS IAM is a web service that helps you securely control access to AWS resources. It allows you to manage:

    Users: Individual identities with long-term credentials.
    Groups: Collections of users for easier management.
    Roles: Identities with permissions that can be assumed by entities.
    Policies: Documents defining permissions.

2.2. IAM Policies

IAM Policies are JSON documents that define permissions. They specify:

    Actions: Operations allowed or denied (e.g., s3:GetObject).
    Resources: AWS resources the actions apply to.
    Effect: Whether to allow or deny the actions.

Types of Policies:

    Managed Policies:
        AWS Managed Policies: Created and managed by AWS.
        Customer Managed Policies: Created and managed by you.

    Inline Policies:
        Embedded directly into a single user, group, or role.

Example of an IAM Policy:

json

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": ["s3:GetObject"],
      "Resource": ["arn:aws:s3:::my-bucket/*"]
    }
  ]
}

2.3. IAM Roles

IAM Roles are identities that can be assumed by trusted entities, such as:

    AWS services (e.g., EC2 instances).
    Users from an external identity provider.
    Applications running on AWS services.

Key Features:

    Temporary Credentials: Roles provide temporary security credentials.
    AssumeRole: API operation used to assume a role.
    Trust Relationships: Define who can assume the role.

When to Use IAM Roles:

    To grant permissions to AWS services on your behalf.
    To delegate access between accounts.
    To access AWS resources from applications running on AWS.

3. IAM in the Context of EKS
3.1. Overview of Amazon EKS

Amazon EKS is a managed Kubernetes service that simplifies deploying and managing Kubernetes clusters on AWS.

    Control Plane: Managed by AWS.
    Worker Nodes: Run in your AWS account.

3.2. IAM Roles for EKS Nodes

Node Instance Role:

    Assigned to EC2 instances (worker nodes).
    Grants permissions for nodes to interact with AWS services (e.g., pulling container images from ECR).

Example Policy for Node Instance Role:

    AmazonEKSWorkerNodePolicy
    AmazonEC2ContainerRegistryReadOnly
    AmazonEKS_CNI_Policy

3.3. IAM Roles for Service Accounts (IRSA)

IRSA allows you to associate IAM roles with Kubernetes service accounts.

    Purpose: Fine-grained permissions for Pods.
    Mechanism: Uses OpenID Connect (OIDC) provider.
    Benefits: Eliminates the need to store AWS credentials in Pods.

4. Kubernetes Service Accounts
4.1. What is a Service Account?

In Kubernetes, a service account provides an identity for processes running in a Pod.

    Default Service Account: Automatically assigned if none specified.
    Custom Service Accounts: Created for specific applications or purposes.

4.2. Service Account Tokens

    Secrets: Kubernetes creates a secret containing a token for each service account.
    Authentication: Pods use tokens to authenticate with the Kubernetes API server.

4.3. Use Cases

    Interacting with Kubernetes API: Pods accessing cluster resources.
    Integration with External Services: When combined with IRSA, accessing AWS services.

5. Integrating IAM Roles with Kubernetes Service Accounts
5.1. IAM Roles for Service Accounts (IRSA) in Depth

IRSA allows Kubernetes service accounts to assume IAM roles using federated identity.
5.1.1. How IRSA Works

    OIDC Provider:
        EKS exposes an OIDC endpoint for each cluster.
        You create an IAM OIDC identity provider in AWS IAM.

    Service Account Annotation:
        Annotate the service account with the IAM role ARN.

    AWS SDK in Pods:
        AWS SDKs use the service account token to get temporary credentials from STS.

5.1.2. Benefits of IRSA

    Security: Fine-grained permissions, least privilege.
    No Credential Management: Avoids hardcoding AWS credentials.
    Isolation: Different Pods can have different IAM permissions.

5.2. Setting Up IRSA
5.2.1. Prerequisites

    EKS Cluster version 1.13 or higher.
    AWS CLI and kubectl configured.

5.2.2. Step-by-Step Implementation

Step 1: Enable OIDC Provider

Retrieve the OIDC issuer URL:

bash

aws eks describe-cluster --name my-cluster --query "cluster.identity.oidc.issuer" --output text

Create the IAM OIDC provider:

bash

aws iam create-open-id-connect-provider \
  --url https://oidc.eks.<region>.amazonaws.com/id/<OIDC_ID> \
  --client-id-list sts.amazonaws.com \
  --thumbprint-list <THUMBPRINT>

Step 2: Create an IAM Policy

Define the policy JSON (e.g., s3-access-policy.json):

json

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": ["s3:ListBucket"],
      "Resource": ["arn:aws:s3:::my-bucket"]
    }
  ]
}

Create the policy:

bash

aws iam create-policy --policy-name S3AccessPolicy --policy-document file://s3-access-policy.json

Step 3: Create an IAM Role

Create a trust relationship policy document (e.g., trust-policy.json):

json

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Federated": "arn:aws:iam::<AWS_ACCOUNT_ID>:oidc-provider/oidc.eks.<region>.amazonaws.com/id/<OIDC_ID>"
      },
      "Action": "sts:AssumeRoleWithWebIdentity",
      "Condition": {
        "StringEquals": {
          "oidc.eks.<region>.amazonaws.com/id/<OIDC_ID>:sub": "system:serviceaccount:<namespace>:<service-account-name>"
        }
      }
    }
  ]
}

Create the IAM role:

bash

aws iam create-role --role-name EKSServiceAccountRole --assume-role-policy-document file://trust-policy.json

Attach the policy to the role:

bash

aws iam attach-role-policy --role-name EKSServiceAccountRole --policy-arn arn:aws:iam::<AWS_ACCOUNT_ID>:policy/S3AccessPolicy

Step 4: Create a Kubernetes Service Account

Create the service account with the IAM role annotation:

yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: s3-access-sa
  namespace: default
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::<AWS_ACCOUNT_ID>:role/EKSServiceAccountRole

Apply the service account:

bash

kubectl apply -f service-account.yaml

Step 5: Deploy a Pod Using the Service Account

Create a deployment or Pod that uses the service account:

yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: s3-access-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: s3-access
  template:
    metadata:
      labels:
        app: s3-access
    spec:
      serviceAccountName: s3-access-sa
      containers:
        - name: app
          image: amazonlinux
          command: ["/bin/sh"]
          args: ["-c", "sleep 3600"]

Apply the deployment:

bash

kubectl apply -f deployment.yaml

Step 6: Verify Access

Exec into the Pod and test access to S3:

bash

kubectl exec -it <pod-name> -- aws s3 ls s3://my-bucket

6. Kubernetes RBAC (Role-Based Access Control)
6.1. Overview of Kubernetes RBAC

RBAC in Kubernetes controls access to the Kubernetes API.

    Subjects: Users, groups, or service accounts.
    Resources: API objects (e.g., Pods, Deployments).
    Verbs: Actions on resources (e.g., get, list, create).

6.2. RBAC Components
6.2.1. Roles and ClusterRoles

    Role:
        Defines permissions within a namespace.
    ClusterRole:
        Defines permissions cluster-wide.

Example Role:

yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "watch", "list"]

6.2.2. RoleBindings and ClusterRoleBindings

    RoleBinding:
        Grants permissions to subjects within a namespace.
    ClusterRoleBinding:
        Grants permissions cluster-wide.

Example RoleBinding:

yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-pods
  namespace: default
subjects:
  - kind: User
    name: jane
    apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io

6.3. Differences Between Kubernetes RBAC and AWS IAM

    Scope:
        Kubernetes RBAC: Controls access to Kubernetes API resources.
        AWS IAM: Controls access to AWS services and resources.

    Subjects:
        Kubernetes RBAC: Kubernetes users, groups, and service accounts.
        AWS IAM: IAM users, groups, and roles.

    Integration:
        Use IRSA to bridge AWS IAM roles with Kubernetes service accounts.

7. Putting It All Together
7.1. Combining IAM Roles, Policies, Service Accounts, and RBAC

    IAM Roles and Policies: Control access to AWS services.
    Kubernetes Service Accounts: Provide identity within the cluster.
    RBAC: Controls access to Kubernetes API resources.
    IRSA: Maps IAM roles to service accounts for AWS resource access.

7.2. Use Cases and When to Use Which
7.2.1. Accessing AWS Services from Pods

    Use IRSA: Assign IAM roles to service accounts to grant Pods permissions to AWS services.
    Avoid Node Instance Roles for Pod Permissions: Prevent over-permission of Pods.

7.2.2. Controlling Access to Kubernetes API

    Use RBAC: Define Roles and RoleBindings to manage permissions within the cluster.
    Service Account Permissions: Grant or restrict service accounts from performing actions on Kubernetes resources.

7.2.3. Multi-Tenant Clusters

    Namespace Isolation: Use namespaces to separate resources.
    RBAC Policies: Limit users and service accounts to their namespaces.
    IRSA with Namespaces: Assign IAM roles specific to namespaces.

7.3. Best Practices

    Principle of Least Privilege: Grant only the permissions necessary.
    Avoid Long-Term Credentials in Pods: Use IRSA instead of hardcoding credentials.
    Rotate Credentials: IAM roles provide temporary credentials that are automatically rotated.
    Monitor and Audit: Use AWS CloudTrail and Kubernetes audit logs.
    Use Namespaces Effectively: Organize resources and apply policies per namespace.

8. Advanced Topics
8.1. Managing Access in Multi-Tenant Clusters

    Network Policies: Control network traffic between Pods and namespaces.
    Pod Security Policies (Deprecated): Control security-sensitive aspects of Pod specification.
    Open Policy Agent (OPA) Gatekeeper: Enforce policies for Kubernetes resources.

8.2. Security Considerations

    AWS IAM Best Practices:
        Use IAM Access Analyzer to identify unused permissions.
        Regularly review and update IAM policies.

    Kubernetes Security:
        Admission Controllers: Enforce security policies at the API level.
        Secrets Management: Use tools like AWS Secrets Manager or HashiCorp Vault.

8.3. Automation and Infrastructure as Code

    Use Tools: Manage configurations using Terraform, CloudFormation, or AWS CDK.
    CI/CD Pipelines: Integrate IAM and Kubernetes configurations into deployment pipelines.


